var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Revise\nusing NSDERungeKutta\nusing Plots, LaTeXStrings\ngr(fontfamily=\"Computer Modern\", framestyle=:box, label=\"\", tickdirection=:out)","category":"page"},{"location":"examples/#Dahlquist","page":"Examples","title":"Dahlquist","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"u0 = 1.0\ntspan = (0.0, 1.0)\nproblem = Dahlquist(u0, tspan)\nfinesolver = Euler(h=1e-3)\nfinesolution = solve(problem, finesolver)\nplot(finesolution, xlabel=L\"$t$\", ylabel=L\"$u(t)$\")\n# savefig(\"dahlquist1.svg\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: svg)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using LinearAlgebra\nu0 = [2.0, 1.5, 1.0]\ntspan = (0.0, 1.0)\nproblem = Dahlquist(u0, tspan, λ=diagm([-1.0, 0.0, 1.0]))\nfinesolver = BackwardEuler(h=1e-3)\nfinesolution = solve(problem, finesolver)\nplot(finesolution, xlabel=L\"$t$\", ylabel=L\"$u(t)$\")\n# savefig(\"dahlquist2.svg\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: svg)","category":"page"},{"location":"examples/#Logistic","page":"Examples","title":"Logistic","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"u0 = 0.1\ntspan = (0.0, 10.0)\nproblem = Logistic(u0, tspan)\nfinesolver = RK4(h=1e-3)\nfinesolution = solve(problem, finesolver)\nplot(finesolution, xlabel=L\"$t$\", ylabel=L\"$u(t)$\")\n# savefig(\"logistic1.svg\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: svg)","category":"page"},{"location":"examples/#Lorenz","page":"Examples","title":"Lorenz","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"u0 = [2.0, 3.0, -14.0]\ntspan = (0.0, 100.0)\nproblem = Lorenz(u0, tspan)\nsolver = F45(h=1e-3)\nsolution = solve(problem, solver)\nplot(solution, label = [L\"x\" L\"y\" L\"z\"], xlabel=L\"t\", ylabel=L\"$u(t)$\")\n# savefig(\"lorenz1.svg\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: svg)","category":"page"},{"location":"#NSDERungeKutta.jl","page":"Home","title":"NSDERungeKutta.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation of NSDERungeKutta.jl, a Julia package implementing Runge-Kutta methods.","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– Depth = 3 –>","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All exported types and functions are considered part of the public API and thus documented in this manual.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NSDERungeKutta]","category":"page"},{"location":"#NSDERungeKutta.AbstractAdaptiveParameters","page":"Home","title":"NSDERungeKutta.AbstractAdaptiveParameters","text":"An abstract type for the parameters of an adaptive (or embedded) Runge-Kutta solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractButcherTableau","page":"Home","title":"NSDERungeKutta.AbstractButcherTableau","text":"An abstract type for a Butcher tableau.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractNewtonParameters","page":"Home","title":"NSDERungeKutta.AbstractNewtonParameters","text":"An abstract type for parameters of the Newton steps in an implicit Runge-Kutta solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractRungeKuttaCache","page":"Home","title":"NSDERungeKutta.AbstractRungeKuttaCache","text":"An abstract type for the temporary variables in a Runge-Kutta solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractRungeKuttaParameters","page":"Home","title":"NSDERungeKutta.AbstractRungeKuttaParameters","text":"An abstract type for Runge-Kutta solver parameters.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractRungeKuttaSolution","page":"Home","title":"NSDERungeKutta.AbstractRungeKuttaSolution","text":"An abstract type for a Runge-Kutta solution.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.AbstractRungeKuttaSolver","text":"An abstract type for a Runge-Kutta solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AbstractStepSize","page":"Home","title":"NSDERungeKutta.AbstractStepSize","text":"An abstract type for the time-step size, useful for adaptive solvers.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.AdaptiveParameters","page":"Home","title":"NSDERungeKutta.AdaptiveParameters","text":"AdaptiveParameters <: AbstractAdaptiveParameters\n\nA composite type for the parameters of an adaptive AbstractRungeKuttaSolver.\n\nConstructors\n\nAdaptiveParameters(εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100)\n\nArguments\n\nεₐ :: Real : absolute tolerance\nεᵣ :: Real : relative tolerance\nMₙ :: Integer : maximum number of iterations\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.ButcherTableau","page":"Home","title":"NSDERungeKutta.ButcherTableau","text":"ButcherTableau <: AbstractButcherTableau\n\nA composite type for the Butcher tableau of a Runge-Kutta solver:\n\nbeginarraycc\n    c  A \n    hline\n    p  b^intercal \n    q  d^intercal\nendarray\n\nConstructors\n\nButcherTableau(A, b, c, s, p[, d, q])\nButcherTableau(tableau::AbstractMatrix{<:Real})\n\nArguments\n\nA :: AbstractMatrix{<:Real} : matrix of coefficients\nb :: AbstractVector{<:Real} : vector of weights\nc :: AbstractVector{<:Real} : vector of nodes\ns :: Integer : number of stages\np :: Integer : order of accuracy\nd :: AbstractVector{<:Real} : embedding's vector of weights (can be nothing)\nq :: Integer : embedding's order of accuracy (can be nothing)\n\nFunctions\n\nbutchertableau : return matrix of parameters.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.DiagonallyImplicitRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.DiagonallyImplicitRungeKuttaSolver","text":"DiagonallyImplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for diagonally-implicit solvers.\n\nConstructors\n\nDiagonallyImplicitRungeKuttaSolver(tableau, stepsize, newton[, adaptive])\nDIRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nnewton :: AbstractNewtonParameters\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::DiagonallyImplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::DiagonallyImplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.ExplicitExponentialRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.ExplicitExponentialRungeKuttaSolver","text":"ExplicitExponentialRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for an exponential explicit AbstractRungeKuttaSolver.\n\nConstructors\n\nExplicitExponentialRungeKuttaSolver(tableau, stepsize[, adaptive])\nExRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ExplicitExponentialRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ExplicitExponentialRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.ExplicitRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.ExplicitRungeKuttaSolver","text":"ExplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for explicit solvers.\n\nConstructors\n\nExplicitRungeKuttaSolver(tableau, stepsize[, adaptive])\nERK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ExplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ExplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.ImplicitExplicitRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.ImplicitExplicitRungeKuttaSolver","text":"ImplicitExplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for implicit-explicit solvers.\n\nConstructors\n\nImplicitExplicitRungeKuttaSolver(implicitableau, explicitableau, stepsize, newton[, adaptive])\nIERK(args...; kwargs...)\n\nArguments\n\nimplicitableau :: AbstractButcherTableau\nexplicitableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nnewton :: AbstractNewtonParameters\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ImplicitExplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ImplicitExplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.ImplicitRungeKuttaSolver","page":"Home","title":"NSDERungeKutta.ImplicitRungeKuttaSolver","text":"ImplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for implicit solvers.\n\nConstructors\n\nImplicitRungeKuttaSolver(tableau, stepsize, newton[, adaptive])\nIRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nnewton :: AbstractNewtonParameters\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ImplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ImplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.NewtonParameters","page":"Home","title":"NSDERungeKutta.NewtonParameters","text":"NewtonParameters <: AbstractNewtonParameters\n\nA composite type for the parameters of simplified Newton.\n\nConstructors\n\nNewtonParameters(; εᵣ=1e-3, Mₙ=10)\n\nArguments\n\nεᵣ :: Real : relative tolerance\nMₙ :: Integer : maximum number of iterations\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.RungeKuttaSolution","page":"Home","title":"NSDERungeKutta.RungeKuttaSolution","text":"RungeKuttaSolution <: AbstractRungeKuttaSolution\n\nA composite type for an AbstractRungeKuttaSolution obtained using an AbstractRungeKuttaSolver.\n\nConstructors\n\nRungeKuttaSolution(u, t)\nRungeKuttaSolution(problem, solver)\n\nArguments\n\nu :: AbstractVector{<:AbstractVector{<:Number}} : numerical solution\nt :: AbstractVector{<:Real} : time grid\n\nFunctions\n\nextract : extract all values for a specific variable\nfirstindex : get the first index\ngetindex : get specified value(s) and time\nlastindex : get the last index\nlength : get the number of time steps\nsetindex! : set value(s) and time\nnumtimesteps : get the number of time steps\nnumvariables : get the number of variables\n\n\n\n\n\n","category":"type"},{"location":"#NSDERungeKutta.RungeKuttaSolution-Tuple{Real, Function}","page":"Home","title":"NSDERungeKutta.RungeKuttaSolution","text":"(solution::RungeKuttaSolution)(tₚ::Real, f::Function)\n\nuses Hermite's cubic splines to interpolate solution and approximate its value at tₚ. Note that it needs the derivative function f(u, t), e.g. from an NSDEBase.AbstractRightHandSide subtype.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RungeKuttaSolution-Tuple{Real}","page":"Home","title":"NSDERungeKutta.RungeKuttaSolution","text":"(solution::RungeKuttaSolution)(tₚ::Real)\n\ninterpolates solution using linear splines, approximating its value at tₚ.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.StepSize","page":"Home","title":"NSDERungeKutta.StepSize","text":"StepSize <: AbstractStepSize\n\nA composite type for the step-size a Runge-Kutta solver.\n\nConstructors\n\nStepSize(h::Real)\n\nFunctions\n\nstepsize : returns (last) step-size\n\n\n\n\n\n","category":"type"},{"location":"#Base.firstindex-Tuple{RungeKuttaSolution}","page":"Home","title":"Base.firstindex","text":"firstindex(solution::RungeKuttaSolution)\n\nreturns the first index of solution.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{RungeKuttaSolution, AbstractVector}","page":"Home","title":"Base.getindex","text":"getindex(solution::RungeKuttaSolution, v::AbstractVector) :: RungeKuttaSolution\n\nreturns a new RungeKuttaSolution containing the fields of solution at the indices v.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{RungeKuttaSolution, Integer}","page":"Home","title":"Base.getindex","text":"getindex(solution::RungeKuttaSolution, i::Integer) :: RungeKuttaSolution\n\nreturns new a RungeKuttaSolution containing the fields of solution at index i.\n\n\n\n\n\n","category":"method"},{"location":"#Base.lastindex-Tuple{RungeKuttaSolution}","page":"Home","title":"Base.lastindex","text":"lastindex(solution::RungeKuttaSolution)\n\nreturns the last index of solution.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{RungeKuttaSolution}","page":"Home","title":"Base.length","text":"length(solution::RungeKuttaSolution)\n\nreturns the number of time steps in solution.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Tuple{RungeKuttaSolution, RungeKuttaSolution, AbstractVector}","page":"Home","title":"Base.setindex!","text":"setindex!(solution::RungeKuttaSolution, values::RungeKuttaSolution, v::AbstractVector)\n\nstores the fields of values into the fields of solution at the specified indices v.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Tuple{RungeKuttaSolution, RungeKuttaSolution, Integer}","page":"Home","title":"Base.setindex!","text":"setindex!(solution::RungeKuttaSolution, values::RungeKuttaSolution, i::Integer)\n\nstores the fields of values into the fields of solution at the specified index i.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Tuple{RungeKuttaSolution, Tuple, Integer}","page":"Home","title":"Base.setindex!","text":"setindex!(solution::RungeKuttaSolution, values::Tuple, i::Integer)\n\nstores the values from values into the fields of solution at the specified index i.\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{RungeKuttaSolution}","page":"Home","title":"Base.size","text":"size(solution::RungeKuttaSolution)\n\nreturns a tuple containing the number of variables and time steps in solution.\n\n\n\n\n\n","category":"method"},{"location":"#NSDEBase.solve-Tuple{AbstractInitialValueProblem, AbstractRungeKuttaSolver}","page":"Home","title":"NSDEBase.solve","text":"solve(problem::AbstractInitialValueProblem, solver::AbstractRungeKuttaSolver) :: RungeKuttaSolution\n\ncomputes the solution of problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.BackwardEuler-Tuple{}","page":"Home","title":"NSDERungeKutta.BackwardEuler","text":"BackwardEuler(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nImplicitEuler(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 1st-order backward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.BogackiShampine-Tuple{}","page":"Home","title":"NSDERungeKutta.BogackiShampine","text":"BogackiShampine(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 3rd-order Bogacki-Shampine method with 2nd-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Butcher5-Tuple{}","page":"Home","title":"NSDERungeKutta.Butcher5","text":"Butcher5(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 5th-order Butcher method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Butcher6-Tuple{}","page":"Home","title":"NSDERungeKutta.Butcher6","text":"Butcher6(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 6th-order Butcher method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Butcher7-Tuple{}","page":"Home","title":"NSDERungeKutta.Butcher7","text":"Butcher7(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 7th-order Butcher method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.CrankNicolson-Tuple{}","page":"Home","title":"NSDERungeKutta.CrankNicolson","text":"CrankNicolson(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nLobattoIIIA2(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order Crank-Nicolson method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.DIRK-Tuple","page":"Home","title":"NSDERungeKutta.DIRK","text":"DiagonallyImplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for diagonally-implicit solvers.\n\nConstructors\n\nDiagonallyImplicitRungeKuttaSolver(tableau, stepsize, newton[, adaptive])\nDIRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nnewton :: AbstractNewtonParameters\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::DiagonallyImplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::DiagonallyImplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.DP54-Tuple","page":"Home","title":"NSDERungeKutta.DP54","text":"DormandPrince54(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nDP54(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 5th-order Dormand-Prince method with 4th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.DormandPrince54-Tuple{}","page":"Home","title":"NSDERungeKutta.DormandPrince54","text":"DormandPrince54(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nDP54(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 5th-order Dormand-Prince method with 4th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ERK-Tuple","page":"Home","title":"NSDERungeKutta.ERK","text":"ExplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for explicit solvers.\n\nConstructors\n\nExplicitRungeKuttaSolver(tableau, stepsize[, adaptive])\nERK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ExplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ExplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ETDEuler-Tuple{AbstractMatrix}","page":"Home","title":"NSDERungeKutta.ETDEuler","text":"ETDEuler(; h::Real=0.0) :: ExplicitExponentialRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 1st-order stiff Exponential-Time-Differencing Euler method. ```\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ETDRK4-Tuple{AbstractMatrix}","page":"Home","title":"NSDERungeKutta.ETDRK4","text":"ETDRK4(; h::Real=0.0) :: ExplicitExponentialRungeKuttaSolver\n\nreturns an ExplicitExponentialRungeKuttaSolver for the 2nd-order stiff Exponential-Time-Differencing Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Euler-Tuple{}","page":"Home","title":"NSDERungeKutta.Euler","text":"Euler(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nExplicitEuler(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 1st-order Euler method. ```\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ExRK-Tuple","page":"Home","title":"NSDERungeKutta.ExRK","text":"ExplicitExponentialRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for an exponential explicit AbstractRungeKuttaSolver.\n\nConstructors\n\nExplicitExponentialRungeKuttaSolver(tableau, stepsize[, adaptive])\nExRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ExplicitExponentialRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ExplicitExponentialRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ExplicitEuler-Tuple","page":"Home","title":"NSDERungeKutta.ExplicitEuler","text":"Euler(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nExplicitEuler(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 1st-order Euler method. ```\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ExplicitMidpoint-Tuple","page":"Home","title":"NSDERungeKutta.ExplicitMidpoint","text":"Midpoint(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nExplicitMidpoint(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 2nd-order mid-point method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.F45-Tuple","page":"Home","title":"NSDERungeKutta.F45","text":"Fehlberg45(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nF45(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order Fehlberg method with 5th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.F78-Tuple","page":"Home","title":"NSDERungeKutta.F78","text":"Fehlberg78(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nF78(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 7th-order Fehlberg method with 8th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Fehlberg45-Tuple{}","page":"Home","title":"NSDERungeKutta.Fehlberg45","text":"Fehlberg45(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nF45(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order Fehlberg method with 5th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Fehlberg78-Tuple{}","page":"Home","title":"NSDERungeKutta.Fehlberg78","text":"Fehlberg78(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nF78(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 7th-order Fehlberg method with 8th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.GaussLegendre2-Tuple","page":"Home","title":"NSDERungeKutta.GaussLegendre2","text":"ImplicitMidpoint(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nGaussLegendre2(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order implicit midpoint method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.GaussLegendre4-Tuple{}","page":"Home","title":"NSDERungeKutta.GaussLegendre4","text":"GaussLegendre4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 4th-order Gauß-Legendre method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.GaussLegendre6-Tuple{}","page":"Home","title":"NSDERungeKutta.GaussLegendre6","text":"GaussLegendre6(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 6th-order Gauß–Legendre method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Heun2-Tuple{}","page":"Home","title":"NSDERungeKutta.Heun2","text":"Heun2(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 2nd-order Heun method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Heun3-Tuple{}","page":"Home","title":"NSDERungeKutta.Heun3","text":"Heun3(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 3rd-order Heun method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.HeunEuler-Tuple{}","page":"Home","title":"NSDERungeKutta.HeunEuler","text":"HeunEuler(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 2nd-order Heun-Euler method with 1st-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IERK-Tuple","page":"Home","title":"NSDERungeKutta.IERK","text":"ExplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for explicit solvers.\n\nConstructors\n\nExplicitRungeKuttaSolver(tableau, stepsize[, adaptive])\nERK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ExplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ExplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXEuler-Tuple{}","page":"Home","title":"NSDERungeKutta.IMEXEuler","text":"IMEXEuler(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\nIMEXSSP1_111(args...; kwargs...) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 1st-order IMEXEuler method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXSSP1_111-Tuple","page":"Home","title":"NSDERungeKutta.IMEXSSP1_111","text":"IMEXEuler(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\nIMEXSSP1_111(args...; kwargs...) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 1st-order IMEXEuler method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXSSP2_222-Tuple{}","page":"Home","title":"NSDERungeKutta.IMEXSSP2_222","text":"IMEXSSP2_222(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 2nd-order IMEX-SSP2(2,2,2) L-stable scheme.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXSSP2_322-Tuple{}","page":"Home","title":"NSDERungeKutta.IMEXSSP2_322","text":"IMEXSSP2_322(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 2nd-order IMEX-SSP2(3,2,2) stiffly-accurate scheme.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXSSP2_332-Tuple{}","page":"Home","title":"NSDERungeKutta.IMEXSSP2_332","text":"IMEXSSP2_332(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 2nd-order IMEX-SSP2(3,3,2) stiffly-accurate scheme.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IMEXSSP3_332-Tuple{}","page":"Home","title":"NSDERungeKutta.IMEXSSP3_332","text":"IMEXSSP3_332(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitExplicitRungeKuttaSolver\n\nreturns an ImplicitExplicitRungeKuttaSolver for the 3rd-order IMEX-SSP3(3,3,2) L-stable scheme.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.IRK-Tuple","page":"Home","title":"NSDERungeKutta.IRK","text":"ImplicitRungeKuttaSolver <: AbstractRungeKuttaSolver\n\nA composite type for implicit solvers.\n\nConstructors\n\nImplicitRungeKuttaSolver(tableau, stepsize, newton[, adaptive])\nIRK(args...; kwargs...)\n\nArguments\n\ntableau :: AbstractButcherTableau\nstepsize :: AbstractStepSize\nnewton :: AbstractNewtonParameters\nadaptive :: AbstractAdaptiveParameters\n\nMethods\n\n(solver::ImplicitRungeKuttaSolver)(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n(solver::ImplicitRungeKuttaSolver)(problem::AbstractInitialValueProblem) :: RungeKuttaSolution\n\nreturns the solution of a problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ImplicitEuler-Tuple","page":"Home","title":"NSDERungeKutta.ImplicitEuler","text":"BackwardEuler(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nImplicitEuler(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 1st-order backward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ImplicitMidpoint-Tuple{}","page":"Home","title":"NSDERungeKutta.ImplicitMidpoint","text":"ImplicitMidpoint(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nGaussLegendre2(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order implicit midpoint method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.KTS-Tuple","page":"Home","title":"NSDERungeKutta.KTS","text":"\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.KuttaNystrom5-Tuple{}","page":"Home","title":"NSDERungeKutta.KuttaNystrom5","text":"KuttaNystrom5(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 5th-order Kutta-Nyström method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIII2-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIII2","text":"LobattoIII2(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order Lobatto III method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIII4-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIII4","text":"LobattoIII4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 4th-order Lobatto III method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIIIA2-Tuple","page":"Home","title":"NSDERungeKutta.LobattoIIIA2","text":"CrankNicolson(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\nLobattoIIIA2(args...; kwargs...) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order Crank-Nicolson method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIIIA4-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIIIA4","text":"LobattoIIIA4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 4th-order Lobatto IIIA method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIIIB4-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIIIB4","text":"LobattoIIIB4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 4th-order Lobatto IIIB method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIIIC2-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIIIC2","text":"LobattoIIIC2(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 2nd-order Lobatto IIIC method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.LobattoIIIC4-Tuple{}","page":"Home","title":"NSDERungeKutta.LobattoIIIC4","text":"LobattoIIIC4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 4th-order Lobatto IIIC method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Midpoint-Tuple{}","page":"Home","title":"NSDERungeKutta.Midpoint","text":"Midpoint(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nExplicitMidpoint(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 2nd-order mid-point method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RK3-Tuple","page":"Home","title":"NSDERungeKutta.RK3","text":"\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RK4-Tuple","page":"Home","title":"NSDERungeKutta.RK4","text":"RungeKutta4(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nRK4(args...; kwargs...)\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauI3-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauI3","text":"RadauI3(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 3rd-order Radau I method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauI5-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauI5","text":"RadauI5(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 5th-order Radau I method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauIA3-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauIA3","text":"RadauIA3(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 3rd-order Radau IA method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauIA5-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauIA5","text":"RadauIA5(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 5th-order Radau IA method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauII3-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauII3","text":"RadauII3(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 3rd-order Radau II method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauII5-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauII5","text":"RadauII5(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 5th-order Radau II method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauIIA3-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauIIA3","text":"RadauIIA3(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 3rd-order Radau IIA method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RadauIIA5-Tuple{}","page":"Home","title":"NSDERungeKutta.RadauIIA5","text":"RadauIIA5(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: ImplicitRungeKuttaSolver\n\nreturns an ImplicitRungeKuttaSolver for the 5th-order Radau IIA method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Ralston2-Tuple{}","page":"Home","title":"NSDERungeKutta.Ralston2","text":"Ralston2(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 2nd-order Ralston method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Ralston3-Tuple{}","page":"Home","title":"NSDERungeKutta.Ralston3","text":"Ralston3(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 3rd-order Ralston method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Ralston4-Tuple{}","page":"Home","title":"NSDERungeKutta.Ralston4","text":"Ralston4(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order Ralston method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Rule38-Tuple{}","page":"Home","title":"NSDERungeKutta.Rule38","text":"Rule38(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order 3/8-rule method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RungeKutta3-Tuple{}","page":"Home","title":"NSDERungeKutta.RungeKutta3","text":"RungeKutta3(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nRK3(args...; kwargs...)\n\nreturns an ExplicitRungeKuttaSolver for the 3rd-order Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.RungeKutta4-Tuple{}","page":"Home","title":"NSDERungeKutta.RungeKutta4","text":"RungeKutta4(; h::Real=0.0) :: ExplicitRungeKuttaSolver\nRK4(args...; kwargs...)\n\nreturns an ExplicitRungeKuttaSolver for the 4th-order Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.SDIRK2-Tuple{}","page":"Home","title":"NSDERungeKutta.SDIRK2","text":"SDIRK2(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 2nd-order SDIRK method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.SDIRK3-Tuple{}","page":"Home","title":"NSDERungeKutta.SDIRK3","text":"SDIRK3(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 3rd-order SDIRK method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.SDIRK4-Tuple{}","page":"Home","title":"NSDERungeKutta.SDIRK4","text":"SDIRK4(; h::Real=0.0, εᵣ::Real=1e-3, Mₙ::Integer=10) :: DiagonallyImplicitRungeKuttaSolver\n\nreturns an DiagonallyImplicitRungeKuttaSolver for the 4th-order SDIRK method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.SSPRK3-Tuple{}","page":"Home","title":"NSDERungeKutta.SSPRK3","text":"SSPRK3(; h::Real=0.0) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 3rd-order Strong-Stability-Preserving Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.V65-Tuple","page":"Home","title":"NSDERungeKutta.V65","text":"Verner65(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nV65(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 6th-order Verner method with 5th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.Verner65-Tuple{}","page":"Home","title":"NSDERungeKutta.Verner65","text":"Verner65(; h::Real=0.0, εₐ::Real=0.0, εᵣ::Real=1e-5, Mₙ::Integer=100, save_stepsizes::Bool=false) :: ExplicitRungeKuttaSolver\nV65(args...; kwargs...) :: ExplicitRungeKuttaSolver\n\nreturns an ExplicitRungeKuttaSolver for the 6th-order Verner method with 5th-order error estimate.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.butchertableau-Tuple{AbstractRungeKuttaSolver}","page":"Home","title":"NSDERungeKutta.butchertableau","text":"butchertableau(solver::AbstractRungeKuttaSolver) :: AbstractMatrix\n\nreturns the Butcher tableau of a solver as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.extract-Tuple{RungeKuttaSolution, AbstractVector}","page":"Home","title":"NSDERungeKutta.extract","text":"extract(solution::RungeKuttaSolution, v::AbstractVector) :: RungeKuttaSolution\n\nreturns the variables of solution indicated by the indices v.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.extract-Tuple{RungeKuttaSolution, Integer}","page":"Home","title":"NSDERungeKutta.extract","text":"extract(solution::RungeKuttaSolution, i::Integer) :: RungeKuttaSolution\n\nreturns the i-th variable of solution. i = 0 returns t.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.extract-Tuple{RungeKuttaSolution}","page":"Home","title":"NSDERungeKutta.extract","text":"extract(solution::RungeKuttaSolution) :: RungeKuttaSolution\n\nreturns all variables of solution, including t.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.numtimesteps-Tuple{RungeKuttaSolution}","page":"Home","title":"NSDERungeKutta.numtimesteps","text":"numtimesteps(solution::RungeKuttaSolution)\n\nreturns the number of time steps in solution.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.numvariables-Tuple{RungeKuttaSolution}","page":"Home","title":"NSDERungeKutta.numvariables","text":"numvariables(solution::RungeKuttaSolution)\n\nreturns the number of variables in solution.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.solve!-Tuple{AbstractRungeKuttaSolution, AbstractInitialValueProblem, AbstractRungeKuttaSolver}","page":"Home","title":"NSDERungeKutta.solve!","text":"solve!(solution::AbstractRungeKuttaSolution, problem::AbstractInitialValueProblem, solver::AbstractRungeKuttaSolver) :: RungeKuttaSolution\n\ncomputes the solution of problem using solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.stepsize-Tuple{AbstractRungeKuttaSolver}","page":"Home","title":"NSDERungeKutta.stepsize","text":"stepsize(solver::AbstractRungeKuttaSolver) :: Real\n\nreturns the step-size of a solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ℛ-Tuple{AbstractMatrix, NSDERungeKutta.AbstractButcherTableau}","page":"Home","title":"NSDERungeKutta.ℛ","text":"ℛ(Z::AbstractMatrix, tableau::AbstractButcherTableau) :: AbstractMatrix\nℛ(Z::AbstractMatrix, solver::AbstractRungeKuttaSolver) :: AbstractMatrix\n\nreturns the stability function of solver.\n\n\n\n\n\n","category":"method"},{"location":"#NSDERungeKutta.ℛ-Tuple{Number, NSDERungeKutta.AbstractButcherTableau}","page":"Home","title":"NSDERungeKutta.ℛ","text":"ℛ(z::Number, tableau::AbstractButcherTableau) :: Number\nℛ(z::Number, solver::AbstractRungeKuttaSolver) :: Number\n\nreturns the stability function of solver:\n\n    R(z) = fracdet(I - z(A - mathbb1b^intercal))det(I - zA)\n\n\n\n\n\n","category":"method"},{"location":"#Abstract-types","page":"Home","title":"Abstract types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!– ```@docs AbstractRungeKuttaSolver","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n<!-- \nAbstractRungeKuttaSolution\nAbstractRungeKuttaParameters\nAbstractButcherTableau\nAbstractStepSize\nAbstractAdaptiveParameters\nAbstractNewtonParameters -->\n\n### Composite types\n\n<!-- ```@docs\nExplicitRungeKuttaSolver\nImplicitRungeKuttaSolver\nExplicitExponentialRungeKuttaSolver\nRungeKuttaSolution\nButcherTableau\nStepSize\nAdaptiveParameters\nNewtonParameters","category":"page"},{"location":"","page":"Home","title":"Home","text":"–>","category":"page"},{"location":"#Solvers","page":"Home","title":"Solvers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!– ```@docs Euler Midpoint Heun2 Ralston2 Heun3 Kutta3 Ralston3 SSPRK3 RK4 Rule38 HeunEuler Fehlberg45 DormandPrince54 Verner65 BackwardEuler ImplicitMidpoint CrankNicolson SDIRK3 GaussLegendre4 GaussLegendre6 LobattoIIIA4 LobattoIIIB2 LobattoIIIB4 LobattoIIIC2 LobattoIIIC4 RadauIA3 RadauIA5 RadauIIA3 RadauIIA5 ExponentialRK4","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### Functions\n\n<!-- ```@docs\nsolve!\nsolve","category":"page"},{"location":"","page":"Home","title":"Home","text":"–>","category":"page"},{"location":"#Utilities","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!– ```@docs ℛ extract getindex lastindex length setindex! size","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Index\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@index ```","category":"page"}]
}
